// schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id          Int              @id @default(autoincrement())
  clientType  ClientType
  physical    PhysicalClient?  @relation("PhysicalClientRelation")
  legal       LegalClient?     @relation("LegalClientRelation")
  accounts    Account[]        @relation("ClientAccounts")
  createdAt   DateTime         @default(now())
}

model PhysicalClient {
  id            Int    @id
  client        Client @relation("PhysicalClientRelation", fields: [id], references: [id])
  lastName      String
  firstName     String
  middleName    String
  birthDate     DateTime
  address       String
  phone         String
  gender        Gender
  isDebtor      Boolean
  photoUrl      String?
  isEmployee    Boolean
  password      String
}

model LegalClient {
  id               Int    @id
  client           Client @relation("LegalClientRelation", fields: [id], references: [id])
  companyName      String
  address          String
  ceoName          String
  accountantName   String
  phone            String
  ownershipForm    OwnershipForm
  password         String
}

model Account {
  id             Int                  @id @default(autoincrement())
  accountNumber  String               @unique
  openedAt       DateTime             @default(now())
  balance        Float                @default(0)
  clientId       Int
  accountType    AccountType
  checkAccount   CheckAccount?
  savingAccount  SavingAccount?
  client         Client               @relation("ClientAccounts", fields: [clientId], references: [id])
  sourceTransactions Transaction[]    @relation("TransactionSourceAccount")
  targetTransactions Transaction[]    @relation("TransactionTargetAccount")
}

model CheckAccount {
  id          Int       @id
  account     Account   @relation(fields: [id], references: [id])
  accountType CheckType
}

model SavingAccount {
  id          Int       @id
  account     Account   @relation(fields: [id], references: [id])
}

model Cashier {
  id            Int          @id @default(autoincrement())
  fullName      String
  login         String       @unique
  passwordHash  String
  isActive      Boolean      @default(true)
  lastLogin     DateTime?
  sessions      Session[]
  createdAt     DateTime     @default(now())
  transactions  Transaction[] @relation("TransactionCashier")
}

model Session {
  id            Int          @id @default(autoincrement())
  cashierId     Int
  cashier       Cashier      @relation(fields: [cashierId], references: [id])
  startTime     DateTime     @default(now())
  endTime       DateTime?
  deposits      Float        @default(0)
  withdrawals   Float        @default(0)
  transfers     Float        @default(0)
  transactions  Transaction[] @relation("SessionTransactions")
  
  @@index([cashierId])
}

model Transaction {
  id                Int          @id @default(autoincrement())
  type              TransactionType
  amount            Float
  fee               Float        @default(0)
  timestamp         DateTime     @default(now())
  cashierId         Int
  cashier           Cashier      @relation("TransactionCashier", fields: [cashierId], references: [id])
  sessionId         Int          
  session           Session      @relation("SessionTransactions", fields: [sessionId], references: [id])
  sourceAccountId   Int?
  sourceAccount     Account?     @relation("TransactionSourceAccount", fields: [sourceAccountId], references: [id])
  targetAccountId   Int?
  targetAccount     Account?     @relation("TransactionTargetAccount", fields: [targetAccountId], references: [id])
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

enum ClientType {
  PHYSICAL
  LEGAL
}

enum Gender {
  MALE
  FEMALE
}

enum OwnershipForm {
  GOVERNMENT
  PRIVATE
  FOREIGN
  MIXED
}

enum AccountType {
  CHECK
  SAVINGS
}

enum CheckType {
  CREDIT
  DEBIT
}